
## 测试扁平化之必备神器：好的单元测试

	
最近一段时间，又把我自己的老本行“工程生产力”相关工作捡了起来，为几个业务产品团队提供贴身式的转型指导。

在其中一个团队，我们已经完成“业务需求协作管理”的第一阶段。这个阶段之所以非常重要，是因为它是“发现问题，快速解决，初见成效，以建立团队信心”的一个阶段，也可以快速判断是否有可能持续深入的阶段。


为了进一步驱动技术团队内部的质效提升，我们开始向“测试扁平化”靠拢（参见《持续交付2.0》第十章 自动化测试管理），启动“质量内建”阶段。


这个步骤的挑战很大，但我认为收益也更大一些。凭我自己当然无法完成这么艰难的任务，必须有一个靠谱的团队Lead，而@修罗王 就是这样一位。他在G厂工作过多年，所以对一些先进生产方式有比较深刻的理解。下面是他对“单元测试”的理解，我觉得写得不错，值得推荐。特别喜欢“飞机、零件、试飞”的隐喻。


顺便说一句，有些实践（就像“持续集成”一样），只有坚持一段时间，并不断反思和领悟（简单地重复并没有什么意义），你才能理解其真实的含义与价值。


（本文对单元测试不做理论分析，只从功利的⾓度出发探讨⼀下⼯程实⽤的规则和⽅法，所以不会回答Utest和TDD有什么区别之类的“学术”问题：）



0

——

单元测试与新飞机的质量


先不可避免要回答的⼀个问题是，“为何要做单元测试？”，我个⼈的回答是：“这是保证——你写的代码是你想要的结果——的最有效办法！”，当然如果你有更好的办法，请不吝赐教。

没有完备的单元测试的代码所构成的⼀个系统，就像组装⼀架飞机，各个配件没有分别经过严格检验，只在最后组装好后，再通过试飞来检验飞机是否正常⼀样。

尽管软件开发可以“开着飞机换引 擎”，但万⼀引发了线上事故，影响了绩效，减少了发量，这样的成本还是太⾼了。所以优秀的工程师总会想尽⼀切办法保证⾃⼰的出品没有质量问题，而单元测试就是⼀个有⼒的武器，可以⼤幅降低⼤家上线时的紧张指数。


下文试着回答这个常见单元测试问题。




1

——

什么是好的单元测试


单元测试需要正确，清晰，完整，健壮！

正确是不言而喻的。实践中单元测试不光测试代码的正确性，还能够帮助其他开发者理解代码逻辑，理解如何使相关的类或者函数（可以当做接⼝或函数的使⽤⽰例了，省的写使⽤⽂档 和demo了），所以要求单测写的清晰，简洁，有⾮常好的可读性。

完整性也是必需的， 单测应该有很⾼的覆盖率，把可能的输⼊输出场景都考虑到。


健壮性是最容易被忽略的一项。当被测试的类或者函数被修改内部实现或者添加功能时，⼀个好的单测应该完全不需要被修改或者只有极少的修改。⽐如⼀个排序函数的单测实现是完全稳定的，它不应该跟着不同的排序算法⽽变化。




2

——

单元测试应该测试什么？


我的理解，单元测试在绝⼤多数场景下其实是⽩盒的测试思维，即单元测试的是”What“，⽽不 是”How“。

还是上⾯排序的例⼦。排序函数的单测只是验证任意⼀个序列是否能被排序函数输出正确的排序结果，⾄于排序算法实施细节的正确性是不需要被关注的。

另外注意，要把“What”拆分成⼀系列不同的⾏为。⾏为就是对不同的输⼊场景有不同的输出，每⼀个⾏为都需要独⽴的单测。这样有新的⾏为引⼊时，就不需要修改已有的单测了。⽐如上⾯的排序函数，⾄少需要两个单测，⼀个是⽆重复输⼊，⼀个是有重复输⼊；⽽不是只⽤⼀个有重复输⼊的单测。


顺便说⼀句，Behavior-driven Test， Test-driven Development！



3

——

什么时候写单元测试？



本⼈更多的时候是同时在实现代码和单元测试。因为这样既可以在实现的过程中随时执⾏单元测试来验证，同时也避免分开写时要重复理解⼀遍设计需求，⼤⼤提⾼了效率，节约了时间。



这⾥特别要强调的⼀点是，有时候，写单元测试和不写单元测试，会直接影响到代码的设计和实现。⽐如要写⼀个有很多条件分⽀处理的函数，如果不考虑单测，你很可能把这所有的逻辑写在⼀个函数⾥。但是如果考虑到单测实现的简洁，你就会把各个分⽀各写成⼀个函数，然后把分⽀逻辑另写成⼀个函数，最终意外达到了优化代码的⽬的。所以评判代码或者设计好不好的⼀个准则是看它容不容易测试。



4

——

什么时候可以不写单元测试？



在个⼈的⼯作实践中，很少遇到可以不写单元测试的情况，当然确实有过不⽤写的时候。下面是可能遇到的几种情况，请自行掂量。

函数特别简单，逻辑很直接，甚⾄于可以直接inline的函数。

函数逻辑太复杂了，历史上也从没有⼈为它写过单测，代码的reviewer也没有要求我写。

代码的重要性不够，都是自己写自己维护的，即使代码有问题也不会有什么重要影响的。有些接⼝的⼤函数，典型如Main函数.....

写对应的单元测试⾮常的复杂，甚⾄⽆法写。这时候很可能

需要修改设计，必须让你的设计易于单元测试

需要增强单元测试框架，框架功能不够，不能很好⽀持某种场景下的单测。

实在想不起来还有什么情况.....也许有些涉及到⽤户交互的UI单元？



5

——

谁来写单元测试？



写生产代码的开发者来写单元测试，这是最⾼效的。不要让测试开发人员来写单元测试，他们有更重要的事情需要做，⽐如单元测试框架，Mock框架，测试基础设施，⾃动化测试，集成测 试，及各种测试⼯具等等。



6

——

怎么写单元测试？



单元测试的代码结构⼀般一个三步经典结构：准备，调⽤，断⾔。

准备部分的⽬的是准备好调⽤所需要的外部环境，如数据，Stub，Mock，临时变量，调⽤请求，环境背景变量等等。

调⽤部分则是实际调⽤需要测试⽅法，函数或者流程。

断⾔部分判断调⽤部分的返回结果是否符合预期。



每个单元测试都应该能清晰地分出这三部分，当然有时调⽤断⾔两部分合在⼀起也是⽐较常见 的。



7

——

再谈“怎么写单元测试？”



一、每个单元测试应该有个好名字，让⼈⼀看就知道是做什么测试，如果名字不能说明问题也要加上完整的注释。⽐如 testSortNumbers_withDuplicated, 意味SortNumbers函数的单元测试来验证有重复数字的情况。


二、尽量避免使⽤命令式编程(Imperative Programming)引⼊条件判断，循环等复杂逻辑。否则很可能会给单元测试⾃⾝带来不少bugs，这样就需要写单元测试的单元测试了：）。⼀句话单元测试不要引⼊复杂的逻辑，最好是不要引⼊逻辑。

三、好的单元测试完备⽽不重复。同样的测试场景，或者同类型的测试输⼊不要写多个单元测试，找⼀个有代表性的场景输⼊就可以了。

四、单元测试针对的是所有单元的对外接⼝，对外⾏为（即public），⽽不是关注于⼀些内部的实现或者内部逻辑。

五、要保证单元测试的外部环境尽量和实际使⽤时是⼀致的，尽量不要给单元测试开任何的后门（Mock除外)，也不要去测试⼀个被修改了的单元，如为了测试⽅便，继承了⼀个被测试类，然后修改它的某些⾏为⽅便测试。
